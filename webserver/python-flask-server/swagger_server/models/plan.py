# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Plan(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, meals: int=None, days: int=None, eaters: List[str]=None, items: List[object]=None):  # noqa: E501
        """Plan - a model defined in Swagger

        :param name: The name of this Plan.  # noqa: E501
        :type name: str
        :param id: The id of this Plan.  # noqa: E501
        :type id: str
        :param meals: The meals of this Plan.  # noqa: E501
        :type meals: int
        :param days: The days of this Plan.  # noqa: E501
        :type days: int
        :param eaters: The eaters of this Plan.  # noqa: E501
        :type eaters: List[str]
        :param items: The items of this Plan.  # noqa: E501
        :type items: List[object]
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'meals': int,
            'days': int,
            'eaters': List[str],
            'items': List[object]
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'meals': 'meals',
            'days': 'days',
            'eaters': 'eaters',
            'items': 'items'
        }

        self._name = name
        self._id = id
        self._meals = meals
        self._days = days
        self._eaters = eaters
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Plan':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plan of this Plan.  # noqa: E501
        :rtype: Plan
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Plan.


        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Plan.


        :param name: The name of this Plan.
        :type name: str
        """

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this Plan.


        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Plan.


        :param id: The id of this Plan.
        :type id: str
        """

        self._id = id

    @property
    def meals(self) -> int:
        """Gets the meals of this Plan.


        :return: The meals of this Plan.
        :rtype: int
        """
        return self._meals

    @meals.setter
    def meals(self, meals: int):
        """Sets the meals of this Plan.


        :param meals: The meals of this Plan.
        :type meals: int
        """

        self._meals = meals

    @property
    def days(self) -> int:
        """Gets the days of this Plan.


        :return: The days of this Plan.
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days: int):
        """Sets the days of this Plan.


        :param days: The days of this Plan.
        :type days: int
        """

        self._days = days

    @property
    def eaters(self) -> List[str]:
        """Gets the eaters of this Plan.


        :return: The eaters of this Plan.
        :rtype: List[str]
        """
        return self._eaters

    @eaters.setter
    def eaters(self, eaters: List[str]):
        """Sets the eaters of this Plan.


        :param eaters: The eaters of this Plan.
        :type eaters: List[str]
        """

        self._eaters = eaters

    @property
    def items(self) -> List[object]:
        """Gets the items of this Plan.


        :return: The items of this Plan.
        :rtype: List[object]
        """
        return self._items

    @items.setter
    def items(self, items: List[object]):
        """Sets the items of this Plan.


        :param items: The items of this Plan.
        :type items: List[object]
        """

        self._items = items
