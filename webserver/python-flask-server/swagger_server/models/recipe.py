# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Recipe(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, id: str=None, ingredients: List[object]=None, instructions: str=None, preparation: int=None, servings: int=None, meal_type: int=None, calories: int=None, joules: int=None, fat: int=None, protein: int=None, carbs: int=None):  # noqa: E501
        """Recipe - a model defined in Swagger

        :param title: The title of this Recipe.  # noqa: E501
        :type title: str
        :param id: The id of this Recipe.  # noqa: E501
        :type id: str
        :param ingredients: The ingredients of this Recipe.  # noqa: E501
        :type ingredients: List[object]
        :param instructions: The instructions of this Recipe.  # noqa: E501
        :type instructions: str
        :param preparation: The preparation of this Recipe.  # noqa: E501
        :type preparation: int
        :param servings: The servings of this Recipe.  # noqa: E501
        :type servings: int
        :param meal_type: The meal_type of this Recipe.  # noqa: E501
        :type meal_type: int
        :param calories: The calories of this Recipe.  # noqa: E501
        :type calories: int
        :param joules: The joules of this Recipe.  # noqa: E501
        :type joules: int
        :param fat: The fat of this Recipe.  # noqa: E501
        :type fat: int
        :param protein: The protein of this Recipe.  # noqa: E501
        :type protein: int
        :param carbs: The carbs of this Recipe.  # noqa: E501
        :type carbs: int
        """
        self.swagger_types = {
            'title': str,
            'id': str,
            'ingredients': List[object],
            'instructions': str,
            'preparation': int,
            'servings': int,
            'meal_type': int,
            'calories': int,
            'joules': int,
            'fat': int,
            'protein': int,
            'carbs': int
        }

        self.attribute_map = {
            'title': 'title',
            'id': 'id',
            'ingredients': 'ingredients',
            'instructions': 'instructions',
            'preparation': 'preparation',
            'servings': 'servings',
            'meal_type': 'mealType',
            'calories': 'calories',
            'joules': 'joules',
            'fat': 'fat',
            'protein': 'protein',
            'carbs': 'carbs'
        }

        self._title = title
        self._id = id
        self._ingredients = ingredients
        self._instructions = instructions
        self._preparation = preparation
        self._servings = servings
        self._meal_type = meal_type
        self._calories = calories
        self._joules = joules
        self._fat = fat
        self._protein = protein
        self._carbs = carbs

    @classmethod
    def from_dict(cls, dikt) -> 'Recipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Recipe of this Recipe.  # noqa: E501
        :rtype: Recipe
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this Recipe.


        :return: The title of this Recipe.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Recipe.


        :param title: The title of this Recipe.
        :type title: str
        """

        self._title = title

    @property
    def id(self) -> str:
        """Gets the id of this Recipe.


        :return: The id of this Recipe.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Recipe.


        :param id: The id of this Recipe.
        :type id: str
        """

        self._id = id

    @property
    def ingredients(self) -> List[object]:
        """Gets the ingredients of this Recipe.


        :return: The ingredients of this Recipe.
        :rtype: List[object]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients: List[object]):
        """Sets the ingredients of this Recipe.


        :param ingredients: The ingredients of this Recipe.
        :type ingredients: List[object]
        """

        self._ingredients = ingredients

    @property
    def instructions(self) -> str:
        """Gets the instructions of this Recipe.


        :return: The instructions of this Recipe.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: str):
        """Sets the instructions of this Recipe.


        :param instructions: The instructions of this Recipe.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def preparation(self) -> int:
        """Gets the preparation of this Recipe.


        :return: The preparation of this Recipe.
        :rtype: int
        """
        return self._preparation

    @preparation.setter
    def preparation(self, preparation: int):
        """Sets the preparation of this Recipe.


        :param preparation: The preparation of this Recipe.
        :type preparation: int
        """
        if preparation is not None and preparation < 0:  # noqa: E501
            raise ValueError("Invalid value for `preparation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._preparation = preparation

    @property
    def servings(self) -> int:
        """Gets the servings of this Recipe.


        :return: The servings of this Recipe.
        :rtype: int
        """
        return self._servings

    @servings.setter
    def servings(self, servings: int):
        """Sets the servings of this Recipe.


        :param servings: The servings of this Recipe.
        :type servings: int
        """
        if servings is not None and servings < 1:  # noqa: E501
            raise ValueError("Invalid value for `servings`, must be a value greater than or equal to `1`")  # noqa: E501

        self._servings = servings

    @property
    def meal_type(self) -> int:
        """Gets the meal_type of this Recipe.


        :return: The meal_type of this Recipe.
        :rtype: int
        """
        return self._meal_type

    @meal_type.setter
    def meal_type(self, meal_type: int):
        """Sets the meal_type of this Recipe.


        :param meal_type: The meal_type of this Recipe.
        :type meal_type: int
        """

        self._meal_type = meal_type

    @property
    def calories(self) -> int:
        """Gets the calories of this Recipe.


        :return: The calories of this Recipe.
        :rtype: int
        """
        return self._calories

    @calories.setter
    def calories(self, calories: int):
        """Sets the calories of this Recipe.


        :param calories: The calories of this Recipe.
        :type calories: int
        """
        if calories is not None and calories < 0:  # noqa: E501
            raise ValueError("Invalid value for `calories`, must be a value greater than or equal to `0`")  # noqa: E501

        self._calories = calories

    @property
    def joules(self) -> int:
        """Gets the joules of this Recipe.


        :return: The joules of this Recipe.
        :rtype: int
        """
        return self._joules

    @joules.setter
    def joules(self, joules: int):
        """Sets the joules of this Recipe.


        :param joules: The joules of this Recipe.
        :type joules: int
        """
        if joules is not None and joules < 0:  # noqa: E501
            raise ValueError("Invalid value for `joules`, must be a value greater than or equal to `0`")  # noqa: E501

        self._joules = joules

    @property
    def fat(self) -> int:
        """Gets the fat of this Recipe.


        :return: The fat of this Recipe.
        :rtype: int
        """
        return self._fat

    @fat.setter
    def fat(self, fat: int):
        """Sets the fat of this Recipe.


        :param fat: The fat of this Recipe.
        :type fat: int
        """
        if fat is not None and fat < 0:  # noqa: E501
            raise ValueError("Invalid value for `fat`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fat = fat

    @property
    def protein(self) -> int:
        """Gets the protein of this Recipe.


        :return: The protein of this Recipe.
        :rtype: int
        """
        return self._protein

    @protein.setter
    def protein(self, protein: int):
        """Sets the protein of this Recipe.


        :param protein: The protein of this Recipe.
        :type protein: int
        """
        if protein is not None and protein < 0:  # noqa: E501
            raise ValueError("Invalid value for `protein`, must be a value greater than or equal to `0`")  # noqa: E501

        self._protein = protein

    @property
    def carbs(self) -> int:
        """Gets the carbs of this Recipe.


        :return: The carbs of this Recipe.
        :rtype: int
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs: int):
        """Sets the carbs of this Recipe.


        :param carbs: The carbs of this Recipe.
        :type carbs: int
        """
        if carbs is not None and carbs < 0:  # noqa: E501
            raise ValueError("Invalid value for `carbs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._carbs = carbs
