# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ShoppingIngredient(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, has_all: bool=None, value_at_home: float=None, unit_at_home: int=None):  # noqa: E501
        """ShoppingIngredient - a model defined in Swagger

        :param id: The id of this ShoppingIngredient.  # noqa: E501
        :type id: str
        :param has_all: The has_all of this ShoppingIngredient.  # noqa: E501
        :type has_all: bool
        :param value_at_home: The value_at_home of this ShoppingIngredient.  # noqa: E501
        :type value_at_home: float
        :param unit_at_home: The unit_at_home of this ShoppingIngredient.  # noqa: E501
        :type unit_at_home: int
        """
        self.swagger_types = {
            'id': str,
            'has_all': bool,
            'value_at_home': float,
            'unit_at_home': int
        }

        self.attribute_map = {
            'id': 'id',
            'has_all': 'hasAll',
            'value_at_home': 'valueAtHome',
            'unit_at_home': 'unitAtHome'
        }

        self._id = id
        self._has_all = has_all
        self._value_at_home = value_at_home
        self._unit_at_home = unit_at_home

    @classmethod
    def from_dict(cls, dikt) -> 'ShoppingIngredient':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShoppingIngredient of this ShoppingIngredient.  # noqa: E501
        :rtype: ShoppingIngredient
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ShoppingIngredient.


        :return: The id of this ShoppingIngredient.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ShoppingIngredient.


        :param id: The id of this ShoppingIngredient.
        :type id: str
        """

        self._id = id

    @property
    def has_all(self) -> bool:
        """Gets the has_all of this ShoppingIngredient.


        :return: The has_all of this ShoppingIngredient.
        :rtype: bool
        """
        return self._has_all

    @has_all.setter
    def has_all(self, has_all: bool):
        """Sets the has_all of this ShoppingIngredient.


        :param has_all: The has_all of this ShoppingIngredient.
        :type has_all: bool
        """

        self._has_all = has_all

    @property
    def value_at_home(self) -> float:
        """Gets the value_at_home of this ShoppingIngredient.


        :return: The value_at_home of this ShoppingIngredient.
        :rtype: float
        """
        return self._value_at_home

    @value_at_home.setter
    def value_at_home(self, value_at_home: float):
        """Sets the value_at_home of this ShoppingIngredient.


        :param value_at_home: The value_at_home of this ShoppingIngredient.
        :type value_at_home: float
        """

        self._value_at_home = value_at_home

    @property
    def unit_at_home(self) -> int:
        """Gets the unit_at_home of this ShoppingIngredient.


        :return: The unit_at_home of this ShoppingIngredient.
        :rtype: int
        """
        return self._unit_at_home

    @unit_at_home.setter
    def unit_at_home(self, unit_at_home: int):
        """Sets the unit_at_home of this ShoppingIngredient.


        :param unit_at_home: The unit_at_home of this ShoppingIngredient.
        :type unit_at_home: int
        """

        self._unit_at_home = unit_at_home
